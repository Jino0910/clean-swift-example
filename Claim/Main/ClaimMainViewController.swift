//
//  ClaimMainViewController.swift
//  Bomapp
//
//  Created by rowkaxl on 25/02/2019.
//  Copyright (c) 2019 Redvelvet Ventures Inc. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxCocoa
import RxSwift
import RealmSwift
import BomappDM
import RxDataSources

protocol ClaimMainDisplayLogic: class {
    func displayClaimList(viewModel: ClaimMain.ClaimList.ViewModel)
    func displayMedicalHistory(viewModel: ClaimMain.MedicalList.ViewModel)
    func displayNewClaim()
    func displayModifyClaim()
    func displayClaimFax()
    func displayOtherClaim()
    func displayModifyFaxNumClaim()
    func displayNoPayoutClaim()
}

class ClaimMainViewController: ClaimBaseViewController, ClaimMainDisplayLogic {
    var interactor: ClaimMainBusinessLogic?
    var router: (NSObjectProtocol & ClaimMainRoutingLogic & ClaimMainDataPassing)?

    var claimList: Results<ClaimItem>?
    var medicalHistoryList: Results<ClaimMedicalHistoryItem>?

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = ClaimMainInteractor()
        let presenter = ClaimMainPresenter()
        let router = ClaimMainRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()

        loadData()
        configure()
    }

    private let disposeBag = DisposeBag()

    public let models = BehaviorRelay<[ClaimSectionModel]>(value: [])

    var selectedIndex: Int = 0

    @IBOutlet weak var backBtn: UIButton!
    @IBOutlet weak var claimBtn: UIButton! {
        didSet {
            claimBtn.setDefaultBottomBtnAttribute()
        }
    }
    @IBOutlet weak var claimBtnHeight: NSLayoutConstraint!

    func displayClaimList(viewModel: ClaimMain.ClaimList.ViewModel) {

        claimList = viewModel.claimList
        models.accept(viewModel.claimSectionModel)
        interactor?.requestFaxState()
    }

    func displayMedicalHistory(viewModel: ClaimMain.MedicalList.ViewModel) {

        medicalHistoryList = viewModel.medicalHistoryList
        models.accept(viewModel.claimSectionModel)
    }

    func displayNewClaim() {
        // 인트로화면으로
        self.router?.routeToClaimNew(segue: nil)
    }

    func displayModifyClaim() {
        // 청구로직 >
    }

    func displayClaimFax() {
        //
    }

    func displayOtherClaim() {

    }

    func displayModifyFaxNumClaim() {

    }

    func displayNoPayoutClaim() {

    }
}

extension ClaimMainViewController {

    private func loadData() {
        interactor?.loadRealmData()
        interactor?.drawUI(selectedIndex: selectedIndex)
    }

    private func configure() {
        configureUI()
        configureRx()
    }

    private func configureUI() {

        self.buttonTabHandler = { title in
            switch title {
            case "간편청구 가이드": self.router?.routeToGuide(segue: nil)
            case "보여지는 금액과 실제 금액은 다를 수 있습니다.": break
            default: break
            }
        }

        self.tabSelectHandler = { selectedIndex in

            self.selectedIndex = selectedIndex
            self.interactor?.drawUI(selectedIndex: self.selectedIndex)
            switch self.selectedIndex {
            case 0:
                self.claimBtnHeight.constant = 56
            case 1:
                self.claimBtnHeight.constant = 0
            default: break
            }
        }

        self.claimButtonTabHandler = { item, buttonTitle in
            switch buttonTitle {
            case "수정하기": break
            case "추가서류 접수": break
            case "동일내용 청구": break
            case "팩스번호 수정": break
            case "팩스 재전송": break
            case "미수령": break
            case "수령": break
            default: break
            }
        }
    }

    private func configureRx() {
        models.bind(to: cv.rx.items(dataSource: dataSource)).disposed(by: self.disposeBag)

        self.backBtn.rx.tap
            .subscribe(onNext: {
                self.navigationController?.popViewController(animated: true)
            }).disposed(by: disposeBag)

        self.claimBtn.rx.tap
            .subscribe(onNext: {

                APIManager.checkAbusing(compCode: nil).subscribe(onSuccess: { [weak self] (code, json) in
                    guard let self = self else { return }
                    switch code {
                    case .code2000:
                        self.interactor?.newClaim()
                    default:
                        self.presentAlert(withTitle: json["message"].string ?? "", confirmTitle: "확인")
                    }

                }) { [weak self] (error) in
                    self?.presentAlert(withTitle: error.localizedDescription, confirmTitle: "확인")
                    }.disposed(by: self.disposeBag)

            }).disposed(by: disposeBag)
    }
}

extension ClaimMainViewController {

    // pdf 보기
    @objc private func viewClaimPDF(_ sender: UIButton) {

        let indexPath = IndexPath(row: 0, section: 0)
        //        guard let indexPath = sender.getIndexPathFromCollectionView(cv: cv) else { return }
        guard let claimList = self.claimList else { return }
        let item = claimList[indexPath.row]

        if item.pdfData != nil {
            router?.routeToPDFViewer(segue: nil)
        } else {

            API.rx.request(Bomapp.claimDownloadFile(faxUuid: item.faxUUID)).subscribe(onSuccess: { [weak self] (response) in
                guard let self = self else { return }
                self.interactor?.saveClaimPDF(claimItem: item, data: response.data)
                self.router?.routeToPDFViewer(segue: nil)

            }) { (error) in
                self.presentAlert(withTitle: error.localizedDescription, confirmTitle: "확인")
                }.disposed(by: disposeBag)

        }
    }

    // 수정하기
    @objc private func modifyClaim(_ sender: UIButton) {

        let indexPath = IndexPath(row: 0, section: 0)
        //        guard let indexPath = sender.getIndexPathFromCollectionView(cv: cv) else { return }
        guard let claimList = self.claimList else { return }
        let item = claimList[indexPath.row]

        self.interactor?.addClaimFax(claimItem: item)
    }

    // 추가 서류 접수
    @objc private func addFaxClaim(_ sender: UIButton) {

        let indexPath = IndexPath(row: 0, section: 0)
        //        guard let indexPath = sender.getIndexPathFromCollectionView(cv: cv) else { return }
        guard let claimList = self.claimList else { return }
        let item = claimList[indexPath.row]

        self.interactor?.addClaimFax(claimItem: item)
    }

    // 다른 보험사 접수
    @objc private func otherClaim(_ sender: UIButton) {

        let indexPath = IndexPath(row: 0, section: 0)
        //        guard let indexPath = sender.getIndexPathFromCollectionView(cv: cv) else { return }
        guard let claimList = self.claimList else { return }
        let item = claimList[indexPath.row]

        self.interactor?.otherClaim(claimItem: item)
    }

    // 팩스 번호 수정
    @objc private func modifyFaxNumClaim(_ sender: UIButton) {

        let indexPath = IndexPath(row: 0, section: 0)
        //        guard let indexPath = sender.getIndexPathFromCollectionView(cv: cv) else { return }
        guard let claimList = self.claimList else { return }
        let item = claimList[indexPath.row]

        self.interactor?.modifyFaxNumClaim(claimItem: item)
    }

    // 팩스 재전송
    private func resendFaxClaim(_ item: ClaimItem) {
        self.interactor?.resendFaxClaim(claimItem: item)
    }

    // 보험금 받음
    @objc private func payoutClaim(_ sender: UIButton) {

        let indexPath = IndexPath(row: 0, section: 0)
        //        guard let indexPath = sender.getIndexPathFromCollectionView(cv: cv) else { return }
        guard let claimList = self.claimList else { return }
        let item = claimList[indexPath.row]

        guard let code = item.insurance.code else { return }
        APIManager.claimCheckPayout(faxUuid: item.faxUUID, insCode: code, receivedReason: nil, receivedType: "1")
            .subscribe(onSuccess: { [weak self] (code) in
                switch code {
                case .code2000:
                    self?.interactor?.savePayoutClaim(claimItem: item)
                default: self?.presentAlert(withTitle: BomappString.Common.retryTitle, confirmTitle: BomappString.Common.confirm)
                }

            }) { [weak self] (error) in
                self?.presentAlert(withTitle: error.localizedDescription, confirmTitle: BomappString.Common.confirm)
            }.disposed(by: disposeBag)
    }

    // 보험금 못받음
    @objc private func noPayoutClaim(_ sender: UIButton) {

        let indexPath = IndexPath(row: 0, section: 0)
        //        guard let indexPath = sender.getIndexPathFromCollectionView(cv: cv) else { return }
        guard let claimList = self.claimList else { return }
        let item = claimList[indexPath.row]

        self.interactor?.noPayoutClaim(claimItem: item)
    }

    // 팩스 실패시
    @objc private func checkAbuse(_ sender: UIButton) {

        let indexPath = IndexPath(row: 0, section: 0)
        //        guard let indexPath = sender.getIndexPathFromCollectionView(cv: cv) else { return }
        guard let claimList = self.claimList else { return }
        let item = claimList[indexPath.row]

        guard let insCode = item.insurance.code else { return }

        APIManager.checkAbusing(compCode: insCode).subscribe(onSuccess: { [weak self] (code, json) in
            switch code {

            // 어뷰징 사용자 아님
            case .code2000:
                self?.resendFaxClaim(item)

            default:
                self?.presentAlert(withTitle: json["title"].string ?? "", message: json["message"].string, confirmTitle: BomappString.Common.confirm, cancelTitle: nil, confirmHandler: { (_) in

                })
            }
        }) { [weak self] (error) in
            self?.presentAlert(withTitle: error.localizedDescription, confirmTitle: BomappString.Common.confirm)
            }.disposed(by: disposeBag)
    }
}
