//
//  ClaimMainInteractor.swift
//  Bomapp
//
//  Created by rowkaxl on 25/02/2019.
//  Copyright (c) 2019 Redvelvet Ventures Inc. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxCocoa
import RxSwift
import RealmSwift

protocol ClaimMainBusinessLogic {
    func loadRealmData()
    func drawUI(selectedIndex: Int)
    func requestFaxState()
    func deleteClaim(claimItem: ClaimItem)
    //    func getClaimPDF(indexPath: IndexPath)
    func saveClaimPDF(claimItem: ClaimItem, data: Data)
    func newClaim()
    func modifyClaim(claimItem: ClaimItem)
    func addClaimFax(claimItem: ClaimItem)
    func otherClaim(claimItem: ClaimItem)
    func modifyFaxNumClaim(claimItem: ClaimItem)
    func resendFaxClaim(claimItem: ClaimItem)
    func savePayoutClaim(claimItem: ClaimItem)
    func noPayoutClaim(claimItem: ClaimItem)
}

protocol ClaimMainDataStore {
    var claimList: Results<ClaimItem> { get set }
    var medicalHistoryList: Results<ClaimMedicalHistoryItem> { get set }
    var isNewClaim: Bool { get set }
    var faxUuid: String { get set }
    var insCode: String { get set }
}

class ClaimMainInteractor: ClaimMainBusinessLogic, ClaimMainDataStore {

    var presenter: ClaimMainPresentationLogic?
    var worker: ClaimMainWorker = ClaimMainWorker()
    var isNewClaim: Bool = true
    var faxUuid: String = ""
    var insCode: String = ""

    let disposeBag = DisposeBag()

    // MARK: Do something

    let realm = try! Realm()

    var claimList: Results<ClaimItem> = {
        try! Realm()
            .objects(ClaimItem.self)
            .sorted(byKeyPath: "date", ascending: false)
    }()

    var medicalHistoryList: Results<ClaimMedicalHistoryItem> = {
        try! Realm()
            .objects(ClaimMedicalHistoryItem.self)
            .sorted(byKeyPath: "date", ascending: false)
    }()

    var claimNotificationToken: NotificationToken?
    var medicalNotificationToken: NotificationToken?

    func loadRealmData() {

        claimNotificationToken = claimList.observe({ [weak self](_:RealmCollectionChange) in
        })
        medicalNotificationToken = medicalHistoryList.observe({ [weak self](_:RealmCollectionChange) in
        })
    }

    func drawUI(selectedIndex: Int) {

        if selectedIndex == 0 {
            let sectionModel = self.worker.getClaimSectionModel(claimList: self.claimList, selectedIndex: selectedIndex)
            let response = ClaimMain.ClaimList.Response(claimList: self.claimList, claimSectionModel: sectionModel)
            self.presenter?.presentClaimList(response: response)
        } else if selectedIndex == 1 {
            let sectionModel = self.worker.getClaimSectionModel(medicalHistoryList: self.medicalHistoryList, selectedIndex: selectedIndex)
            let response = ClaimMain.MedicalList.Response(medicalHistoryList: self.medicalHistoryList, claimSectionModel: sectionModel)
            self.presenter?.presentMedicalHistory(response: response)
        }
    }

    deinit {
        claimNotificationToken?.invalidate()
        medicalNotificationToken?.invalidate()
    }
}

extension ClaimMainInteractor {

    // 팩스 상태 조회
    func requestFaxState() {
        worker.requestFaxState(claimList: claimList)
    }

    // 삭제하기
    func deleteClaim(claimItem: ClaimItem) {
        worker.deleteClaim(claimItem: claimItem)
    }

    //    func getClaimPDF(indexPath: IndexPath) {
    //
    //    }

    // PDF 저장
    func saveClaimPDF(claimItem: ClaimItem, data: Data) {
        worker.saveClaimPDF(claimItem: claimItem, data: data)
    }

    // 신규청구
    func newClaim() {
        setClaimSingletonData(item: nil, isNewClaim: true)
        presenter?.presentNewClaim()
    }

    // 수정하기
    func modifyClaim(claimItem: ClaimItem) {
        setClaimSingletonData(item: claimItem)
        presenter?.presentModifyClaim()
    }

    // 추가 서류 접수
    func addClaimFax(claimItem: ClaimItem) {
        setClaimSingletonData(item: claimItem, afterConfirmToResult: true)
        ClaimSingleton.instance.requiredDocuments.accept([])
        presenter?.presentClaimFax()
    }

    // 다른 보험사 접수
    func otherClaim(claimItem: ClaimItem) {
        setClaimSingletonData(item: claimItem, afterConfirmToResult: true)
        ClaimSingleton.instance.insuranceList.accept([])
        ClaimSingleton.instance.faxUUID = ""
        ClaimSingleton.instance.claimUUID = ""
        presenter?.presentOtherClaim()
    }

    // 팩스 번호 수정
    func modifyFaxNumClaim(claimItem: ClaimItem) {
        setClaimSingletonData(item: claimItem)
        ClaimSingleton.instance.claimState = .sendingFAX
        presenter?.presentModifyFaxNumClaim()
    }

    // 팩스 재전송
    func resendFaxClaim(claimItem: ClaimItem) {

        guard let insCode = claimItem.insurance.code else { return }
        guard let faxNumber = claimItem.insurance.faxNo else { return }

        APIManager.request(target: Bomapp.claimResendFAX(faxUuid: claimItem.faxUUID,
                                                         insCode: insCode,
                                                         receiverNo: faxNumber,
                                                         senderNo: claimItem.telNumber))
            .subscribe(onSuccess: { (code, _) in
                switch code {
                case .code2000:
                    self.requestFaxState()
                default: break
                }
            })
            .disposed(by: self.disposeBag)
    }

    // 보험금 받음
    func savePayoutClaim(claimItem: ClaimItem) {
        worker.savePayoutClaim(claimItem: claimItem)
    }

    // 보험금 못받음
    func noPayoutClaim(claimItem: ClaimItem) {
        guard claimItem.faxUUID.count > 0 else { return }
        guard let insCode = claimItem.insurance.code else { return }
        self.faxUuid = claimItem.faxUUID
        self.insCode = insCode
        presenter?.presentNoPayoutClaim()
    }
}

extension ClaimMainInteractor {

    // 청구정보 싱글톤 셋팅
    func setClaimSingletonData(item: ClaimItem?, isNewClaim: Bool = false, afterConfirmToResult: Bool = false) {

        ClaimSingleton.instance.removeAllData()

        if afterConfirmToResult {
            if let stateEnum = item?.stateEnum {
                ClaimSingleton.instance.claimState = stateEnum
            }
        }

        self.isNewClaim = isNewClaim
        if !self.isNewClaim {
            if let item = item {
                ClaimSingleton.instance.configurationSingleton(item)
            }
        }
    }
}
