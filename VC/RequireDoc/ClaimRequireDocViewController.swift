//
//  ClaimRequireDocViewController.swift
//  Bomapp
//
//  Created by rowkaxl on 26/02/2019.
//  Copyright (c) 2019 Redvelvet Ventures Inc. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxCocoa
import RxSwift

protocol ClaimRequireDocDisplayLogic: class {
    func displaySectionModel(viewModel: ClaimRequireDoc.SectionItem.ViewModel)
}

class ClaimRequireDocViewController: ClaimBaseViewController, ClaimRequireDocDisplayLogic {
    var interactor: ClaimRequireDocBusinessLogic?
    var router: (NSObjectProtocol & ClaimRequireDocRoutingLogic & ClaimRequireDocDataPassing)?

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = ClaimRequireDocInteractor()
        let presenter = ClaimRequireDocPresenter()
        let router = ClaimRequireDocRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()

        interactor?.getSectionModel()
        configure()
    }

    private let disposeBag = DisposeBag()

    public let models = BehaviorRelay<[ClaimSectionModel]>(value: [])

    @IBOutlet weak var backBtn: UIButton!
    @IBOutlet weak var closeBtn: UIButton!
    @IBOutlet weak var bottomBtn: UIButton! {
        didSet {
            bottomBtn.setDefaultBottomBtnAttribute()
        }
    }

    // MARK: Do something

    func displaySectionModel(viewModel: ClaimRequireDoc.SectionItem.ViewModel) {
        models.accept(viewModel.claimSectionModel)
    }
}

extension ClaimRequireDocViewController {

    private func configure() {
        configureUI()
        configureRx()
    }

    private func configureUI() {

        buttonTabHandler = { buttonTitle in

            print(buttonTitle)

            switch buttonTitle {
            case "구비서류 안내": break
            default: break
            }
        }
    }

    private func configureRx() {
        models.bind(to: cv.rx.items(dataSource: dataSource)).disposed(by: self.disposeBag)

        self.backBtn.rx.tap
            .subscribe(onNext: {
                self.navigationController?.popViewController(animated: true)
            }).disposed(by: disposeBag)

        self.closeBtn.rx.tap
            .subscribe(onNext: {
                //                self.navigationController?.popViewController(animated: true)
            }).disposed(by: disposeBag)

        self.bottomBtn.rx.tap
            .subscribe(onNext: {
                self.router?.routeToRequireDocList(segue: nil)
            }).disposed(by: disposeBag)
    }
}
