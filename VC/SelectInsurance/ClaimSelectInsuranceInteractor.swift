//
//  ClaimSelectInsuranceInteractor.swift
//  Bomapp
//
//  Created by rowkaxl on 25/02/2019.
//  Copyright (c) 2019 Redvelvet Ventures Inc. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ClaimSelectInsuranceBusinessLogic {
    func getInsuranceList()
    func getInsurancePDFData(item: ClaimModelItem)
    func saveClaimSingleton(selectedIndexPaths: [IndexPath], compList: [InsuranceCompModel])
}

protocol ClaimSelectInsuranceDataStore {
    var pdfURL: String! { get set }
}

class ClaimSelectInsuranceInteractor: ClaimSelectInsuranceBusinessLogic, ClaimSelectInsuranceDataStore {
    var presenter: ClaimSelectInsurancePresentationLogic?
    var worker = ClaimSelectInsuranceWorker()

    var pdfURL: String!
    // MARK: Do something

    func getInsuranceList() {

        worker.requestInsuranceCompToFax { (compList) in

            let response = ClaimSelectInsurance.CompList.Response(json: compList)
            self.presenter?.presentInsuranceList(response: response)
        }
    }

    func getInsurancePDFData(item: ClaimModelItem) {

        guard let code = item.value["code"].string else { return }

        worker.requestInsurancePDFData(compCode: code) { (pdfData) in

            let response = ClaimSelectInsurance.PDFData.Response(json: pdfData)

            guard let url = response.json["data", "formUrl"].string else { return }
            self.pdfURL = url

            self.presenter?.presentPDFData(response: response)
        }
    }

    func saveClaimSingleton(selectedIndexPaths: [IndexPath], compList: [InsuranceCompModel]) {

        var selectedList: [InsuranceCompModel] = []
        for indexPath in selectedIndexPaths {
            selectedList.append(compList[indexPath.row])
        }
        ClaimSingleton.instance.insuranceList.accept(selectedList)
        self.presenter?.presentSaveClaimSingleton()
    }
}
