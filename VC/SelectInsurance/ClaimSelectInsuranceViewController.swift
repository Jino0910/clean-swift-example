//
//  ClaimSelectInsuranceViewController.swift
//  Bomapp
//
//  Created by rowkaxl on 25/02/2019.
//  Copyright (c) 2019 Redvelvet Ventures Inc. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxCocoa
import RxSwift
import BomappDM
import RxDataSources

protocol ClaimSelectInsuranceDisplayLogic: class {
    func displayInsuranceList(viewModel: ClaimSelectInsurance.CompList.ViewModel)
    func displayPDFView(viewModel: ClaimSelectInsurance.PDFData.ViewModel)
    func displaySaveClaimSingleton()
}

class ClaimSelectInsuranceViewController: ClaimBaseViewController, ClaimSelectInsuranceDisplayLogic {
    var interactor: ClaimSelectInsuranceBusinessLogic?
    var router: (NSObjectProtocol & ClaimSelectInsuranceRoutingLogic & ClaimSelectInsuranceDataPassing)?

    var compList: [InsuranceCompModel]?

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = ClaimSelectInsuranceInteractor()
        let presenter = ClaimSelectInsurancePresenter()
        let router = ClaimSelectInsuranceRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()

        interactor?.getInsuranceList()
        configure()
    }

    private let disposeBag = DisposeBag()

    public let models = BehaviorRelay<[ClaimSectionModel]>(value: [])

    @IBOutlet weak var backBtn: UIButton!
    @IBOutlet weak var closeBtn: UIButton!
    @IBOutlet weak var bottomBtn: UIButton! {
        didSet {
            bottomBtn.setDefaultBottomBtnAttribute()
        }
    }

    func displayInsuranceList(viewModel: ClaimSelectInsurance.CompList.ViewModel) {
        compList = viewModel.compList
        models.accept(viewModel.claimSectionModel)
    }

    func displayPDFView(viewModel: ClaimSelectInsurance.PDFData.ViewModel) {
//        router?.routeToPDFViewer(segue: nil, pdfURL: viewModel.pdfURL)
        router?.routeToPDFViewer(segue: nil)
    }

    func displaySaveClaimSingleton() {
        router?.routeToInputContact(segue: nil)
    }
}

extension ClaimSelectInsuranceViewController {

    private func configure() {
        configureUI()
        configureRx()
    }

    private func configureUI() {

        cv.allowsMultipleSelection = true

        self.claimButtonTabHandler = { item, buttonTitle in
            switch buttonTitle {
            case "약관보기": self.interactor?.getInsurancePDFData(item: item)
            default: break
            }
        }
    }

    private func configureRx() {
        models.bind(to: cv.rx.items(dataSource: dataSource)).disposed(by: self.disposeBag)

        self.backBtn.rx.tap
            .subscribe(onNext: {
                self.navigationController?.popViewController(animated: true)
            }).disposed(by: disposeBag)

        self.closeBtn.rx.tap
            .subscribe(onNext: {
//                self.navigationController?.popViewController(animated: true)
            }).disposed(by: disposeBag)

        self.bottomBtn.rx.tap
            .subscribe(onNext: {

                guard let selectedIndexPaths = self.cv.indexPathsForSelectedItems else { return }

                guard selectedIndexPaths.count > 0 else {
                    PopupManager.confirmPopup(title: "안내",
                                              content: "청구하실 보험사를 선택해주세요.")
                        .subscribe().disposed(by: self.disposeBag)
                    return
                }

                guard let compList = self.compList else { return }

                self.interactor?.saveClaimSingleton(selectedIndexPaths: selectedIndexPaths, compList: compList)

            }).disposed(by: disposeBag)

        cv.rx.itemSelected.subscribe(onNext: selectedIndexPath).disposed(by: disposeBag)
        cv.rx.itemDeselected.subscribe(onNext: deselectedIndexPath).disposed(by: disposeBag)
    }
}

extension ClaimSelectInsuranceViewController {

    private func selectedIndexPath(_ selectedIndexPath: IndexPath) {

        guard let selectedIndexPaths = cv.indexPathsForSelectedItems else { return }

        if selectedIndexPaths.count > 5 {

            PopupManager.confirmPopup(title: BomappString.Claim.claimSelectInsuranceCompTitle,
                                      content: BomappString.Common.confirm)
            .subscribe().disposed(by: disposeBag)

            cv.deselectItem(at: selectedIndexPath, animated: false)
        }
    }

    private func deselectedIndexPath(_ deselectedIndexPath: IndexPath) {

    }

}
